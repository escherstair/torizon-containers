include:
  - "/ci-scripts/release/release.yml"
  - "/ci-scripts/test/aval-tests.yml"
  - "/ci-scripts/test/dotnet-tests.yml"
  - "/ci-scripts/build/upstream.yml"
  - "/ci-scripts/build/imx8.yml"
  - "/ci-scripts/build/am62.yml"
  - "/ci-scripts/lint/lint.yml"

image: docker:latest

variables:
  DEBIAN_POINT_RELEASE: "12.6-slim"
  TORADEX_INTERNAL_DOCKERHUB_CACHE: "artifactory-horw.int.toradex.com/dockerhub-proxy-no-cache-horw"
  # This should be set by docker image already, just to be sure...
  DOCKER_HOST: tcp://docker:2375
  # Use overlayfs driver for better performance
  DOCKER_TLS_CERTDIR: ""
  DOCKER_DRIVER: overlay2

  PLATFORM_SPECIFIC_FOLDER: "platform-specific"
  SUPPORT_FILES_FOLDER: "support-files"
  IMX8_FOLDER: "imx8"
  AM62_FOLDER: "am62"
  UPSTREAM_FOLDER: "upstream"
  TESTS_FOLDER: "tests"
  CHROMIUM_TESTS_FOLDER: "chromium-tests"
  CROSS_TOOLCHAIN_FOLDER: "cross-toolchain"
  DOTNET_FOLDER: "dotnet"
  SSH_FOLDER: "ssh"
  BASE_FOLDER: "base"
  WAYLAND_BASE_FOLDER: "wayland-base"
  GTK_3_FOLDER: "gtk3"
  WESTON_FOLDER: "weston"
  GRAPHICS_TESTS_FOLDER: "graphics-tests"
  WESTON_TOUCH_CALIBRATOR_FOLDER: "weston-touch-calibrator"
  QT5_WAYLAND_FOLDER: "qt5-wayland"
  QT6_WAYLAND_FOLDER: "qt6-wayland"
  QT5_WAYLAND_EXAMPLES_FOLDER: "qt5-wayland-examples"
  QT6_WAYLAND_EXAMPLES_FOLDER: "qt6-wayland-examples"
  DOTNET_BASE_FOLDER: "base"
  DOTNET_DEBUG_FOLDER: "debug"
  DOTNET_WAYLAND_BASE_FOLDER: "wayland-base"
  DOTNET_WAYLAND_DEBUG_FOLDER: "wayland-debug"
  RT_VALIDATION_FOLDER: "rt-validation"
  RT_TESTS_FOLDER: "rt-tests"
  STRESS_TESTS_FOLDER: "stress-tests"
  CHROMIUM_FOLDER: "chromium"
  COG_FOLDER: "cog"

services:
  - name: docker:dind

.include-regctl:
  before_script:
    - apk update && apk add curl
    - curl -L https://github.com/regclient/regclient/releases/download/v0.6.0/regctl-linux-amd64 > /usr/bin/regctl
    # to update the hash: download the metadata the regctl repo, verify the signatures, generate the SHA256SUMS file
    # with `sha256sum -b regctl > SHA256SUMS` and update it here.
    - echo "44216c0ab3bd41ae30b07392d6cdab6971f48ab3f72400e617f5f0ded4d70742 /usr/bin/regctl" > SHA256SUMS
    - if ! sha256sum -c SHA256SUMS; then echo "Checksum for regctl has failed"; fi
    - chmod 755 /usr/bin/regctl
    - regctl registry login docker.io -u $DOCKERHUB_USER -p $DOCKERHUB_TOKEN

.do_print_environment_variables: &do_print_environment_variables
  - echo "GitLab CI/CD environment variables:"
  - env

.docker-build:
  variables:
    ADD_TORADEX_REPOSITORY: 1
  script:
    - *do_print_environment_variables
    - apk add curl
    - docker login -u $DOCKERHUB_USER -p $DOCKERHUB_TOKEN
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker info

    # FIXME: uncomment during TCCP-809
    # - |
    #   if [[ "${IMAGE_NAME}" == *am62 ]]; then
    #     export TORADEX_SNAPSHOT=$(curl https://feeds.toradex.com/stable/am62/snapshots/latest-snapshot)
    #   elif [[ "${IMAGE_NAME}" == *imx8 ]]; then
    #     export TORADEX_SNAPSHOT=$(curl https://feeds.toradex.com/stable/imx8/snapshots/latest-snapshot)
    #   else
    #     export TORADEX_SNAPSHOT=$(curl https://feeds.toradex.com/stable/upstream/snapshots/latest-snapshot)
    #   fi

    - docker buildx create --name multiarch-builder --driver docker-container --platform linux/arm/v7,linux/arm64/v8,linux/amd64 --use
    - docker buildx inspect --bootstrap
    - docker run --privileged --rm ${TORADEX_INTERNAL_DOCKERHUB_CACHE}/tonistiigi/binfmt --install arm64,arm

    - if [ -n "$BUILD_FOR_ARM_V7" ]; then echo "Building for linux/arm/v7" && PLATFORM_BUILD_ARM_V7="--platform linux/arm/v7"; fi
    - if [ -n "$BUILD_FOR_ARM_V8" ]; then echo "Building for linux/arm64/v8" && PLATFORM_BUILD_ARM_V8="--platform linux/arm64/v8"; fi
    - if [ -n "$BUILD_FOR_AMD64" ]; then echo "Building for linux/amd64" && PLATFORM_BUILD_AMD64="--platform linux/amd64"; fi

    # in MR pipelines, push or manual triggered pipelines on feature branch ~> push image to local registry
    # in protected ref ~> push to DockerHub
    - |
      if [[ "${CI_PIPELINE_SOURCE}" == "merge_request_event" \
          || "${CI_COMMIT_REF_PROTECTED}" == "false" ]]; then
        export PULL_REGISTRY=${CI_REGISTRY}
        export PUSH_REGISTRY=${CI_REGISTRY}
        export REGISTRY_NAMESPACE=${CI_PROJECT_PATH}
        export IMAGE_TAG=${CI_COMMIT_REF_SLUG}-${CI_PIPELINE_ID}
      fi
      if [[ "${CI_COMMIT_REF_PROTECTED}" == "true" ]]; then
        export PULL_REGISTRY=${TORADEX_INTERNAL_DOCKERHUB_CACHE}
        export PUSH_REGISTRY="docker.io"
        export REGISTRY_NAMESPACE=${PROJECT_SETTING_REGISTRY_NAMESPACE}
        export IMAGE_TAG=${CI_COMMIT_BRANCH}
      fi

    # Echo the full build command before running it
    - |
      echo "docker buildx build --progress=plain --sbom=true --push ${PLATFORM_BUILD_ARM_V7} ${PLATFORM_BUILD_ARM_V8} ${PLATFORM_BUILD_AMD64} \
        --build-arg ACCEPT_FSL_EULA=${ACCEPT_FSL_EULA} \
        --build-arg TORADEX_FEED_URL=${TORADEX_FEED_URL} \
        --build-arg BASE_IMAGE_NAME=${BASE_IMAGE_NAME} \
        --build-arg BASE_IMAGE_NAME_DEBUG=${BASE_IMAGE_NAME_DEBUG} \
        --build-arg BASE_IMAGE_NAME_WAYLAND=${BASE_IMAGE_NAME_WAYLAND} \
        --build-arg CROSS_COMPILER=${CROSS_COMPILER} \
        --build-arg CROSS_TARGET_ARCH=${CROSS_TARGET_ARCH} \
        --build-arg DEBIAN_POINT_RELEASE=${DEBIAN_POINT_RELEASE} \
        --build-arg DOTNET_DEBUGGER_VER=${DOTNET_DEBUGGER_VER} \
        --build-arg DOTNET_RUNTIME=${DOTNET_RUNTIME} \
        --build-arg DOTNET_SEMVER=${DOTNET_SEMVER} \
        --build-arg IMAGE_TAG=${IMAGE_TAG} \
        --build-arg REGISTRY_PROXY=${TORADEX_INTERNAL_DOCKERHUB_CACHE} \
        --build-arg REGISTRY=${PULL_REGISTRY} \
        --build-arg REGISTRY_NAMESPACE=${REGISTRY_NAMESPACE} \
        --build-arg TORADEX_SNAPSHOT=${TORADEX_SNAPSHOT} \
        --label container.name=${IMAGE_NAME} \
        --label container.version=${MAJOR}.${MINOR}.${PATCH} \
        --label git.branch=${CI_COMMIT_BRANCH} \
        --label git.hash=${CI_COMMIT_SHA} \
        --label pipeline.id=${CI_PIPELINE_ID} \
        -f ${DOCKERFILE_FOLDER}Dockerfile \
        -t ${PUSH_REGISTRY}/${REGISTRY_NAMESPACE}/${IMAGE_NAME}:${IMAGE_TAG} \
        ${DOCKERFILE_BUILD_CONTEXT_FOLDER}"

    - docker buildx build --progress=plain --sbom=true --push ${PLATFORM_BUILD_ARM_V7} ${PLATFORM_BUILD_ARM_V8} ${PLATFORM_BUILD_AMD64}
      --build-arg ACCEPT_FSL_EULA=${ACCEPT_FSL_EULA}
      --build-arg TORADEX_FEED_URL=${TORADEX_FEED_URL}
      --build-arg BASE_IMAGE_NAME=${BASE_IMAGE_NAME}
      --build-arg BASE_IMAGE_NAME_DEBUG=${BASE_IMAGE_NAME_DEBUG}
      --build-arg BASE_IMAGE_NAME_WAYLAND=${BASE_IMAGE_NAME_WAYLAND}
      --build-arg CROSS_COMPILER=${CROSS_COMPILER}
      --build-arg CROSS_TARGET_ARCH=${CROSS_TARGET_ARCH}
      --build-arg DEBIAN_POINT_RELEASE=${DEBIAN_POINT_RELEASE}
      --build-arg DOTNET_DEBUGGER_VER=${DOTNET_DEBUGGER_VER}
      --build-arg DOTNET_RUNTIME=${DOTNET_RUNTIME}
      --build-arg DOTNET_SEMVER=${DOTNET_SEMVER}
      --build-arg IMAGE_TAG=${IMAGE_TAG}
      --build-arg REGISTRY_PROXY=${TORADEX_INTERNAL_DOCKERHUB_CACHE}
      --build-arg REGISTRY=${PULL_REGISTRY}
      --build-arg REGISTRY_NAMESPACE=${REGISTRY_NAMESPACE}
      --build-arg TORADEX_SNAPSHOT=${TORADEX_SNAPSHOT}
      --label container.name=${IMAGE_NAME}
      --label container.version=${MAJOR}.${MINOR}.${PATCH}
      --label git.branch=${CI_COMMIT_BRANCH}
      --label git.hash=${CI_COMMIT_SHA}
      --label pipeline.id=${CI_PIPELINE_ID}
      -f ${DOCKERFILE_FOLDER}Dockerfile
      -t ${PUSH_REGISTRY}/${REGISTRY_NAMESPACE}/${IMAGE_NAME}:${IMAGE_TAG}
      ${DOCKERFILE_BUILD_CONTEXT_FOLDER}
