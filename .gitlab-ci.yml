image: docker:latest

variables:
  # This should be set by docker image already, just to be sure...
  DOCKER_HOST: tcp://docker:2375
  # Use overlayfs driver for better performance
  DOCKER_TLS_CERTDIR: ""
  DOCKER_DRIVER: overlay2
  IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  GITLAB_DOCKERREGISTRY_SUFFIX: ${CI_COMMIT_REF_SLUG}-${CI_PIPELINE_ID}
  GITLAB_DOCKERREGISTRY_SUFFIX_LATEST: ${CI_COMMIT_REF_SLUG}-latest

services:
  - name: docker:dind

before_script:
  - docker info

stages:
  - build-base
  - build-ssh
  - deploy

# Docker image builds
#
# Build the Docker images  specificd in DOCKERFILE_FOLDER/IMAGE_NAME and push
# it to Gitlab's internal Docker registry
.docker-build:
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - if test -n "${BASE_NAME}"; then docker pull ${CI_REGISTRY_IMAGE}/${BASE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX} && docker tag ${CI_REGISTRY_IMAGE}/${BASE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX} torizon/${BASE_NAME}:buster ; fi || exit 1
    # Try to download latest image for cache, but don't fail if it does not exist
    - docker pull ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX_LATEST} || true
    - docker pull ${CI_REGISTRY}/rd/torizon-core-containers/debian-docker-images/${IMAGE_NAME}:buster-latest || true
    - docker build --build-arg IMAGE_ARCH=${IMAGE_ARCH}
      --build-arg ARCH_ARG=${ARCH_ARG}
      --build-arg CROSS_COMPILE_ARG=${CROSS_COMPILE_ARG}
      --build-arg CROSSBUILD_ARCH_ARG=${CROSSBUILD_ARCH_ARG}
      --cache-from ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX_LATEST}
      ${DOCKER_NO_CACHE:+--no-cache}
      -f ${DOCKERFILE_FOLDER}Dockerfile
      -t ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX}
      -t ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX_LATEST}
      ${DOCKERFILE_FOLDER}
    - docker push ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX}
    - docker push ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX_LATEST}

# Docker deploy jobs
#
# Make sure DOCKER_HUB_USER/DOCKER_HUB_PW is properly set in the project
# specific Gitlab CI settings.
.docker-deploy:
  variables:
    DOCKER_TAGS: "buster 10 10.1 latest"
  before_script:
    - docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_PW
  stage: deploy
  when: manual
  script:
    - docker pull ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX}
    # Get creation date of this container. This make sure that we do not create
    # new date tags when pushing the same container again.
    - export TIMESTAMP=$(docker inspect -f '{{ .Created }}' ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX})
    - export DATE_TAG=$(date '+%Y%m%d' -d ${TIMESTAMP} -D '%Y-%m-%dT%H:%M:%S')
    - export DOCKER_TAGS="$DOCKER_TAGS $DATE_TAG"
    - for tag in ${DOCKER_TAGS};
      do
      docker tag ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX} ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME}:${tag};
      done
    - docker push ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME}

docker-build-armhf-toolchain:
  extends: .docker-build
  variables:
    ARCH_ARG: armhf
    CROSS_COMPILE_ARG: arm-linux-gnueabihf-
    CROSSBUILD_ARCH_ARG: armhf
    IMAGE_NAME: debian-cross-toolchain-armhf
    DOCKERFILE_FOLDER: "base/"
  stage: build-base

docker-build-armhf-toolchain-ssh:
  extends: .docker-build
  variables:
    ARCH_ARG: armhf
    BASE_NAME: debian-cross-toolchain-armhf
    IMAGE_NAME: debian-cross-toolchain-ssh-armhf
    DOCKERFILE_FOLDER: "ssh/"
  stage: build-ssh

docker-deploy-armhf-toolchain:
  extends: .docker-deploy
  variables:
    IMAGE_NAME: debian-cross-toolchain-armhf

docker-deploy-armhf-toolchain-ssh:
  extends: .docker-deploy
  variables:
    IMAGE_NAME: debian-cross-toolchain-ssh-armhf

docker-build-aarch64-toolchain:
  extends: .docker-build
  variables:
    ARCH_ARG: aarch64
    CROSS_COMPILE_ARG: arm-linux-gnueabihf-
    CROSSBUILD_ARCH_ARG: arm64
    IMAGE_NAME: debian-cross-toolchain-aarch64
    DOCKERFILE_FOLDER: "base/"
  stage: build-base

docker-build-aarch64-toolchain-ssh:
  extends: .docker-build
  variables:
    ARCH_ARG: aarch64
    BASE_NAME: debian-cross-toolchain-aarch64
    IMAGE_NAME: debian-cross-toolchain-ssh-aarch64
    DOCKERFILE_FOLDER: "ssh/"
  stage: build-ssh

docker-deploy-aarch64-toolchain:
  extends: .docker-deploy
  variables:
    IMAGE_NAME: debian-cross-toolchain-aarch64

docker-deploy-aarch64-toolchain-ssh:
  extends: .docker-deploy
  variables:
    IMAGE_NAME: debian-cross-toolchain-ssh-aarch64
